The ``overloading`` module
======================

Using ``overloading``
-------------------

    >>> import overloading

    >>> class MyInt(int):
    ...     pass

    >>> class MyList(list):
    ...     pass
    
    >>> @overloading.overload(basestring)
    ... def processing(x):
    ...     return 'basestring'

    >>> @overloading.overload(list, int)
    ... def processing(x, y):
    ...     return 'list, int'

    >>> @overloading.overload(int, list)
    ... def processing(x, y):
    ...     return 'int, list'

    >>> @overloading.overload(float, complex, dict)
    ... def processing(x, y, z):
    ...     return 'float, complex, dict'


Now use it:

    >>> processing(0, []) == 'int, list'
    True

    >>> processing(0.0, 0j, {}) == 'float, complex, dict'
    True

    >>> processing("") == 'basestring'
    True

    >>> processing(u"") == 'basestring'
    True
    
    >>> processing([], 0) == 'list, int'
    True

    >>> processing({}) #doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    CannotResolve:

    >>> processing(list) #doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    CannotResolve:

    >>> processing(0j) #doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    CannotResolve:

    >>> processing("") == 'basestring'
    True
    
    >>> processing(u"") == 'basestring'
    True
    
    >>> processing( MyInt(), [] ) == 'int, list'
    True
    
    >>> processing( MyList(), 0 ) == 'list, int'
    True
    
    >>> processing( MyInt(), MyList() ) == 'int, list'
    True